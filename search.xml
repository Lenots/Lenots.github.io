<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<link rel="stylesheet" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"></script><div id="mmedia-ZrBiCVjEnRivmEHn"></div><script> var ZrBiCVjEnRivmEHn_options = JSON.parse('{\"lrcType\":0,\"theme\":\"#eeeeee\",\"autoplay\":true,\"volume\":0.3,\"fixed\":true,\"audio\":[{\"name\":\"风林火山~月光清澈之夜\",\"artist\":\" \",\"cover\":\"/assets/images/music.png\",\"url\":\"/assets/music/风林火山~月光清澈之夜.mp3\"},{\"name\":\"Master Boot Record - ANSI.SYS\",\"artist\":\" \",\"cover\":\"/assets/images/music.png\",\"url\":\"/assets/music/Master Boot Record - ANSI.SYS.mp3\"},{\"name\":\"Lost Years\",\"artist\":\" \",\"cover\":\"/assets/images/music.png\",\"url\":\"/assets/music/Lost Years.mp3\"}]}'); ZrBiCVjEnRivmEHn_options.container = document.getElementById("mmedia-ZrBiCVjEnRivmEHn"); const ap_ZrBiCVjEnRivmEHn = new APlayer(ZrBiCVjEnRivmEHn_options); </script>]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title>Unreal Engine 子组件总是在世界原点生成的问题</title>
    <url>/2021/08/19/ue-child-component-offset/</url>
    <content><![CDATA[<h1 id="Unreal-Engine-child-component-is-always-in-the-world’s-origin"><a href="#Unreal-Engine-child-component-is-always-in-the-world’s-origin" class="headerlink" title="Unreal Engine child component is always in the world’s origin"></a>Unreal Engine child component is always in the world’s origin</h1><p>  在虚幻引擎中,使用C++和蓝图来实现<strong>子组件</strong>的<strong>选择</strong>功能时,会发现子组件总是在游戏运行时偏移到世界的原点.<br>  我们希望子组件的位置与父组件相同.<br>  如果没有经验,这个问题就不好解决.因为一些思路看起来正确,实际上达不到效果.</p>
<span id="more"></span>
<h1 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h1><p>我们创建一个actor,我们计划actor中有两个组件.</p>
<ul>
<li>一个是Rootcompnent,类型为Scenecomponent.</li>
<li>另一个是ShapeComponent,我们<strong>在蓝图中选择它的类型</strong>,Sphere或Box类型等.</li>
<li>我们希望ShapeComponent为Rootcompnent的子组件.并且Rootcompnent的位置与ShapeComponent的位置默认在世界中同一点.</li>
</ul>
<h1 id="我们尝试以下方法"><a href="#我们尝试以下方法" class="headerlink" title="我们尝试以下方法"></a>我们尝试以下方法</h1><ul>
<li>方法一<ul>
<li>在actor 的h中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">"ScreenDebugMessage"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UShapeComponent</span>* <span class="title">ShapeComponent</span>;</span></span><br></pre></td></tr></table></figure></li>
<li>在actor 的cpp构造函数中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">RootComponent = CreateDefaultSubobject&lt;USceneComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">"SceneComponent"</span>));</span><br></pre></td></tr></table></figure></li>
<li>在actor的BeginPlay()中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"><span class="keyword">if</span>(ShapeComponent)</span><br><span class="line">{</span><br><span class="line">  ShapeComponent-&gt;<span class="built_in">AttachToComponent</span>(RootComponentFAttachmentTransformRules::KeepRelativeTransform);</span><br><span class="line">  <span class="comment">//这一句代码 有或没有 结果相同</span></span><br><span class="line">  <span class="comment">//ShapeComponent-&gt;SetRelativeLocation({0,0,0});</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></li>
<li>在蓝图中选择ShapeComponent的类型为Box,运行几次,发现ShapeComponent跑到了世界原点.<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="4.072ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 1800 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mstyle" fill="red" stroke="red"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">失</text></g><g data-mml-node="mi" transform="translate(900,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">败</text></g></g></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li>方法二<ul>
<li>在actor 的h中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">"ScreenDebugMessage"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UShapeComponent</span>* <span class="title">ShapeComponent</span>;</span></span><br></pre></td></tr></table></figure></li>
<li>在actor 的cpp构造函数中 我们先为ShapeComponent指定一个具体类型,为的是进行父组件绑定<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">RootComponent = CreateDefaultSubobject&lt;USceneComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">"SceneComponent"</span>));</span><br><span class="line">ShapeComponent = CreateDefaultSubobject&lt;UBoxComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">"ShapeComponent"</span>));</span><br><span class="line">ShapeComponent-&gt;<span class="built_in">SetupAttachment</span>(RootComponent);</span><br><span class="line"><span class="comment">//这一句代码 有或没有 结果相同</span></span><br><span class="line"><span class="comment">//ShapeComponent-&gt;SetRelativeLocation({0,0,0});</span></span><br></pre></td></tr></table></figure></li>
<li>在蓝图中选择ShapeComponent的类型为Sphere(为的是改变默认类型,改成非box类型的都可以),运行几次,发现ShapeComponent跑到了世界原点.<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="4.072ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 1800 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mstyle" fill="red" stroke="red"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">失</text></g><g data-mml-node="mi" transform="translate(900,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">败</text></g></g></g></g></g></svg></mjx-container></li>
</ul>
</li>
</ul>
<p>  由此可以看出,想要实现功能,在构造函数或BeginPlay()中进行的Attach和位置调整都不管用.<br>  <del>我猜想  <strong>构造函数</strong> <strong>BeginPlay()</strong> <strong>蓝图对蓝图面板中设置的组件的特殊处理</strong> 的执行次序中,<strong>蓝图对蓝图面板中设置的组件的特殊处理</strong>最后执行.</del><br>  <del>这个特殊处理我并没有找到源码,就算找到源码,通常情况下我也不愿意修改. 因为对源码的修改意味着,每次升级引擎版本,我们都需要自己修改代码.</del>  </p>
<h1 id="正确处理方法"><a href="#正确处理方法" class="headerlink" title="正确处理方法"></a>正确处理方法</h1><ul>
<li>在蓝图面板中进行类型选择时,通过<strong>PostEditChangeProperty</strong>事件,<strong>及时进行子组件绑定</strong><ul>
<li>在actor 的h中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">"ScreenDebugMessage"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UShapeComponent</span>* <span class="title">ShapeComponent</span>;</span></span><br></pre></td></tr></table></figure></li>
<li>在actor 的cpp构造函数中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">RootComponent = CreateDefaultSubobject&lt;USceneComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">"SceneComponent"</span>));</span><br></pre></td></tr></table></figure></li>
<li>在actor的PostEditChangeProperty()中(actor名为AScreenDebugMessageOnCollision)<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">AScreenDebugMessageOnCollision::<span class="built_in">PostEditChangeProperty</span>(FPropertyChangedEvent&amp; PropertyChangedEvent)</span><br><span class="line">{</span><br><span class="line">  Super::<span class="built_in">PostEditChangeProperty</span>(PropertyChangedEvent);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(PropertyChangedEvent.Property != <span class="literal">nullptr</span>)</span><br><span class="line">  {</span><br><span class="line">    FName PropertyName = PropertyChangedEvent.Property-&gt;<span class="built_in">GetFName</span>();</span><br><span class="line">    <span class="keyword">if</span>( PropertyName == <span class="built_in">GET_MEMBER_NAME_CHECKED</span>(AScreenDebugMessageOnCollision,ShapeComponent) )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>(ShapeComponent)</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(!ShapeComponent-&gt;<span class="built_in">GetAttachParent</span>())</span><br><span class="line">        {</span><br><span class="line">          <span class="comment">// UE_LOG(LogTemp,Warning,TEXT("Parent NULL"))</span></span><br><span class="line">          ShapeComponent-&gt;<span class="built_in">AttachToComponent</span>(RootComponent,FAttachmentTransformRules::KeepRelativeTransform);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">          <span class="comment">// UE_LOG(LogTemp,Warning,TEXT("Parent has"))</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<ul>
<li>在蓝图中选择ShapeComponent的类型为任意类型,运行几次,发现ShapeComponent位置与父组件相同.<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="4.072ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 1800 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mstyle" fill="green" stroke="green"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">成</text></g><g data-mml-node="mi" transform="translate(900,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">功</text></g></g></g></g></g></svg></mjx-container></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul>
<li>ScreenDebugMessageOnCollision.h<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CoreMinimal.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GameFramework/Actor.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ScreenDebugMessageOnCollision.generated.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SG_API</span> <span class="title">AScreenDebugMessageOnCollision</span> :</span> <span class="keyword">public</span> AActor</span><br><span class="line">{</span><br><span class="line">  <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:	</span><br><span class="line">  <span class="comment">// Sets default values for this actor's properties</span></span><br><span class="line">  <span class="built_in">AScreenDebugMessageOnCollision</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">"ScreenDebugMessage"</span>)</span><br><span class="line">  <span class="keyword">float</span> ShowTime = <span class="number">3.f</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">"ScreenDebugMessage"</span>)</span><br><span class="line">  FString BeginOverlapDebugMsg = <span class="built_in">TEXT</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">"ScreenDebugMessage"</span>)</span><br><span class="line">  FString EndOverlapDebugMsg = <span class="built_in">TEXT</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  uint64 LocalUID;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category = <span class="string">"ScreenDebugMessage"</span>)</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">UShapeComponent</span>* <span class="title">ShapeComponent</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PostEditChangeProperty</span><span class="params">(FPropertyChangedEvent&amp; PropertyChangedEvent)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">NotifyActorBeginOverlap</span><span class="params">(AActor* OtherActor)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">NotifyActorEndOverlap</span><span class="params">(AActor* OtherActor)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:	</span><br><span class="line">  <span class="comment">// Called every frame</span></span><br><span class="line">  <span class="comment">// virtual void Tick(float DeltaTime) override;</span></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>ScreenDebugMessageOnCollision.cpp<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ScreenDebugMessageOnCollision.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Components/ShapeComponent.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values</span></span><br><span class="line">AScreenDebugMessageOnCollision::<span class="built_in">AScreenDebugMessageOnCollision</span>()</span><br><span class="line">{</span><br><span class="line">  <span class="comment">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span></span><br><span class="line">  PrimaryActorTick.bCanEverTick = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取本地的唯一ID 满足需求使用</span></span><br><span class="line">  LocalUID = (uint64)<span class="built_in">GetUniqueID</span>();</span><br><span class="line"></span><br><span class="line">  RootComponent = CreateDefaultSubobject&lt;USceneComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">"SceneComponent"</span>));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AScreenDebugMessageOnCollision::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="comment">// void AScreenDebugMessageOnCollision::Tick(float DeltaTime)</span></span><br><span class="line"><span class="comment">// {</span></span><br><span class="line"><span class="comment">// 	Super::Tick(DeltaTime);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AScreenDebugMessageOnCollision::PostEditChangeProperty</span><span class="params">(FPropertyChangedEvent&amp; PropertyChangedEvent)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  Super::<span class="built_in">PostEditChangeProperty</span>(PropertyChangedEvent);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(PropertyChangedEvent.Property != <span class="literal">nullptr</span>)</span><br><span class="line">  {</span><br><span class="line">    FName PropertyName = PropertyChangedEvent.Property-&gt;<span class="built_in">GetFName</span>();</span><br><span class="line">    <span class="keyword">if</span>( PropertyName == <span class="built_in">GET_MEMBER_NAME_CHECKED</span>(AScreenDebugMessageOnCollision,ShapeComponent) )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>(ShapeComponent)</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(!ShapeComponent-&gt;<span class="built_in">GetAttachParent</span>())</span><br><span class="line">        {</span><br><span class="line">          <span class="comment">// UE_LOG(LogTemp,Warning,TEXT("Parent NULL"))</span></span><br><span class="line">          ShapeComponent-&gt;<span class="built_in">AttachToComponent</span>(RootComponent,FAttachmentTransformRules::KeepRelativeTransform);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">          <span class="comment">// UE_LOG(LogTemp,Warning,TEXT("Parent has"))</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> AScreenDebugMessageOnCollision::<span class="built_in">NotifyActorBeginOverlap</span>(AActor* OtherActor)</span><br><span class="line">{</span><br><span class="line">  Super::<span class="built_in">NotifyActorBeginOverlap</span>(OtherActor);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(GEngine)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>(BeginOverlapDebugMsg == <span class="built_in">TEXT</span>(<span class="string">""</span>))</span><br><span class="line">    {</span><br><span class="line">      FString str = <span class="built_in">GetName</span>() + <span class="built_in">TEXT</span>(<span class="string">" BeginOverlapDebugMsg Is NULL"</span>);</span><br><span class="line">      GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(LocalUID, ShowTime, FColor::Red, str);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(LocalUID, ShowTime, FColor::Green, BeginOverlapDebugMsg);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AScreenDebugMessageOnCollision::NotifyActorEndOverlap</span><span class="params">(AActor* OtherActor)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  Super::<span class="built_in">NotifyActorEndOverlap</span>(OtherActor);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(GEngine)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>(EndOverlapDebugMsg == <span class="built_in">TEXT</span>(<span class="string">""</span>))</span><br><span class="line">    {</span><br><span class="line">      FString str = <span class="built_in">GetName</span>() + <span class="built_in">TEXT</span>(<span class="string">" EndOverlapDebugMsg Is NULL"</span>);</span><br><span class="line">      GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(LocalUID, ShowTime, FColor::Red, str);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(LocalUID, ShowTime, FColor::Green, EndOverlapDebugMsg);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>  完毕  </p>
<link rel="stylesheet" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"></script><div id="mmedia-EembLrnUXIykSeXJ"></div><script> var EembLrnUXIykSeXJ_options = JSON.parse('{\"lrcType\":0,\"theme\":\"#eeeeee\",\"autoplay\":true,\"volume\":0.3,\"fixed\":true,\"audio\":[{\"name\":\"风林火山~月光清澈之夜\",\"artist\":\" \",\"cover\":\"/assets/images/music.png\",\"url\":\"/assets/music/风林火山~月光清澈之夜.mp3\"},{\"name\":\"Master Boot Record - ANSI.SYS\",\"artist\":\" \",\"cover\":\"/assets/images/music.png\",\"url\":\"/assets/music/Master Boot Record - ANSI.SYS.mp3\"},{\"name\":\"Lost Years\",\"artist\":\" \",\"cover\":\"/assets/images/music.png\",\"url\":\"/assets/music/Lost Years.mp3\"}]}'); EembLrnUXIykSeXJ_options.container = document.getElementById("mmedia-EembLrnUXIykSeXJ"); const ap_EembLrnUXIykSeXJ = new APlayer(EembLrnUXIykSeXJ_options); </script>




]]></content>
      <categories>
        <category>Unreal Engine</category>
      </categories>
      <tags>
        <tag>Unreal Engine</tag>
        <tag>C++</tag>
        <tag>Blueprint</tag>
        <tag>Component</tag>
      </tags>
  </entry>
</search>
